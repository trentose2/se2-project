swagger: '2.0'
info:
  version: '1.0'
  title: "Valsugana Bees API"
  description: >-
    This is an API that allows users to organize exams and tasks.
    It supports creation and submission of tasks and creation of groups of users that partecipate to exams.
  license:
    name: MIT
    url: https://github.com/xates/se2-project/blob/master/LICENSE
host: se2-project.herokuapp.com
basePath: /v1
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    post:
      summary: "Register a new user"
      tags:
      - User
      description: "Register a new user to the system with the supplied information"
      parameters:
      - in: "body"
        name: "body"
        description: "User object which contains the information of the new user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "User created"
          schema:
            $ref: '#/definitions/User'
        405:
          description: "Invalid input"
  /users/{id}:
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: integer
      description: "id of the user"
    get:
      summary: "Get information about a user"
      description: "Get the information related to the user identified by the supplied id"
      tags:
      - User
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        404:
          description: "User not found"
    put:
      summary: "Edit information about a user"
      description: "Edit the information related to the user identified by the supplied id"
      tags:
      - User
      parameters:
      - in: "body"
        name: "body"
        description: "User object that contains the new information"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses: # check the codes!!
        200:
          description: "User information successfully edited"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "Invalid user ID"
        404:
          description: "User not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Delete the specified user"
      description: "Delete the user with the supplied id"
      tags:
      - User
      responses:
        200:
          description: "User successfully deleted"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "User not found"
  /groups:
      get:
        summary: "Get all public groups and groups created by a user"
        tags:
        - Group
        description: "Get all public groups and groups created by the user identified by the email that is passed as parameter"
        parameters:
        - in: "query"
          name: "email"
          required: true
          type: string
          description: "Email of a user"
        responses:
          200:
            description: "Succesfully retrieved groups"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Group"
      post:
        summary: "Create a new group of users"
        tags:
        - Group
        description: "Create a new group with the supplied information"
        parameters:
        - in: "body"
          name: "body"
          description: "Group information"
          required: true
          schema:
            $ref: "#/definitions/Group"
        responses:
          201:
            description: "Group successfully created"
            schema:
              $ref: '#/definitions/Group'
          405:
            description: "Invalid input"
  /groups/{id}:
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: integer
      description: "id of the group"
    get:
      summary: "Get information about a group"
      description: "Get the information about the group that is identified by the supplied id"
      tags:
      - Group
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Group'
        404:
          description: "Group not found"
    put:
      summary: "Edit information of a group"
      description: "Edit the information of the group that is identified by the supplied id"
      tags:
      - Group
      parameters:
      - in: "body"
        name: "body"
        description: "Group object that contains the new information"
        required: true
        schema:
          $ref: "#/definitions/Group"
      responses: # check the codes!!
        200:
          description: "Group successfully edited"
          schema:
            $ref: '#/definitions/Group'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Group not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Delete a group"
      description: "Delete the group that is identified by the supplied id"
      tags:
      - Group
      responses:
        200:
          description: "Group successfully deleted"
          schema:
            $ref: '#/definitions/Group'
        404:
          description: "Group not found"
  /tasks:
    get:
      summary: "Get the tasks created by the user"
      tags:
      - Task
      description: "Get the tasks that are created by the user identified by the email supplied as parameter"
      parameters:
        - in: "query"
          name: "email"
          required: true
          type: string
          description: "Email of a user"
      responses:
        200:
          description: "Successfully retrieved tasks"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
    post:
      summary: "Create a new task"
      tags:
      - Task
      description: "Create a new task with the information"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object which contains the information of the new task to be created"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        201:
          description: "Task successfully created"
          schema:
            $ref: '#/definitions/Task'
        405:
          description: "Invalid input"
  /tasks/{id}:
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: integer
    get:
      summary: "Get information about a task"
      description: "Get the information about the task identified by the supplied id"
      tags:
      - Task
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Task'
        404:
          description: "Task not found"
    put:
      summary: "Edit information about a task"
      description: "Edit the information about the task identified by the supplied id"
      tags:
      - Task
      parameters:
      - in: "body"
        name: "body"
        description: "Task object which contains the new information of the task"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses: # check the codes!!
        200:
          description: "Task successfully edited"
          schema:
            $ref: '#/definitions/Task'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Delete a task"
      description: "Delete the task that is identified by the supplied id"
      tags:
      - Task
      responses:
        200:
          description: "Task successfully deleted"
          schema:
            $ref: '#/definitions/Task'
        404:
          description: "Task not found"
  /pools:
    get:
        summary: "Get all public pools and pools created by a user"
        tags:
        - Pool
        description: "Get all public pools and pools created by the user identified by the email that is passed as parameter"
        parameters:
        - in: "query"
          name: "email"
          required: true
          type: string
          description: "Email of a user"
        responses:
          200:
            description: "Succesfully retrieved pools"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Pool"
    post:
      summary: "Create a new pool"
      tags:
      - Pool
      description: "Create a new pool with the supplied information"
      parameters:
      - in: "body"
        name: "body"
        description: "Pool information"
        required: true
        schema:
          $ref: "#/definitions/Pool"
      responses:
        201:
          description: "Pool successfully created"
          schema:
            $ref: '#/definitions/Pool'
        405:
          description: "Invalid input"
  /pools/{id}:
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: integer
        description: "id of the pool"
    get:
      summary: "Get information about a pool"
      description: "Get the information about the pool that is identified by the supplied id"
      tags:
      - Pool
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Pool'
        404:
          description: "Pool not found"
    put:
      summary: "Edit information of a pool"
      description: "Edit the information of the pool that is identified by the supplied id"
      tags:
      - Pool
      parameters:
      - in: "body"
        name: "body"
        description: "Pool object that contains the new information"
        required: true
        schema:
          $ref: "#/definitions/Pool"
      responses: # check the codes!!
        200:
          description: "Pool successfully edited"
          schema:
            $ref: '#/definitions/Pool'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pool not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Delete a pool"
      description: "Delete the pool that is identified by the supplied id"
      tags:
      - Pool
      responses:
        200:
          description: "Pool successfully deleted"
          schema:
            $ref: '#/definitions/Pool'
        404:
          description: "Pool not found"
  /exams:
    get:
      summary: "Get the exams created by the user"
      tags:
      - Exam
      description: "Get the exams that are created by the user identified by the email supplied as parameter"
      parameters:
        - in: "query"
          name: "email"
          required: true
          type: string
          description: "Email of a user"
      responses:
        200:
          description: "Successfully retrieved exams"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Exam"
    post:
      summary: "Create a new exam"
      tags:
      - Exam
      description: "Create a new exam with the information"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object which contains the information of the new exam to be created"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        201:
          description: "Exam successfully created"
          schema:
            $ref: '#/definitions/Exam'
        405:
          description: "Invalid input"
  /exams/{id}:
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: integer
        description: "id of the exam"
    get:
      summary: "Get information about a exam"
      description: "Get the information about the exam that is identified by the supplied id"
      tags:
      - Exam
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Exam'
        404:
          description: "Exam not found"
    put:
      summary: "Edit information of a exam"
      description: "Edit the information of the exam that is identified by the supplied id"
      tags:
      - Exam
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that contains the new information"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses: # check the codes!!
        200:
          description: "Exam successfully edited"
          schema:
            $ref: '#/definitions/Exam'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Delete a exam"
      description: "Delete the exam that is identified by the supplied id"
      tags:
      - Exam
      responses:
        200:
          description: "Exam successfully deleted"
          schema:
            $ref: '#/definitions/Exam'
        404:
          description: "Exam not found"
  /papers:
    get:
      summary: "Get the papers assigned to the user"
      tags:
      - Paper
      description: "Get the papers that are assigned to the user identified by the email supplied as parameter"
      parameters:
        - in: "query"
          name: "email"
          required: true
          type: string
          description: "Email of a user"
      responses:
        200:
          description: "Successfully retrieved papers"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Paper"
  /papers/{id}:
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: integer
        description: "id of the paper"
    get:
      summary: "Get information about a paper"
      description: "Get the information about the paper that is identified by the supplied id"
      tags:
      - Paper
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Paper'
        404:
          description: "Paper not found"
  /exam/{id}/papers:
    parameters:
    - name: "id"
      in: path
      required: true
      type: integer
      description: "id of the exam"
    get:
      summary: "Get papers related to an exam"
      description: "Get the information about the papers that are related to the exam identified by the supplied id"
      tags:
      - Paper
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Paper'
        404:
          description: "Exam not found"
  /submissions/{id}:
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: integer
        description: "id of the submission"
    get:
      summary: "Get information about a submission"
      description: "Get the information about the submission that is identified by the supplied id"
      tags:
      - Submission
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Submission'
        404:
          description: "Submission not found"
    put:
      summary: "Edit information of a submission"
      description: "Edit the information of the submission that is identified by the supplied id"
      tags:
      - Submission
      parameters:
      - in: "body"
        name: "body"
        description: "Submission object that contains the new information"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses: # check the codes!!
        200:
          description: "Submission successfully edited"
          schema:
            $ref: '#/definitions/Submission'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Submission not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Delete a submission"
      description: "Delete the submission that is identified by the supplied id"
      tags:
      - Submission
      responses:
        200:
          description: "Submission successfully deleted"
          schema:
            $ref: '#/definitions/Submission'
        404:
          description: "Submission not found"
  /papers/{id}/submissions:
    parameters:
    - name: "id"
      in: path
      required: true
      type: integer
      description: "id of the paper"
    get:
      summary: "Get submission of a paper"
      description: "Get the information about the submission of the paper identified by the supplied id"
      tags:
      - Submission
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Submission'
        404:
          description: "Paper not found"
    post:
      summary: "Create a new submission for a paper"
      tags:
      - Submission
      description: "Create a new submission for a paper identified by the supplied id"
      parameters:
      - in: "body"
        name: "body"
        description: "Submission object which contains the information of the new submission to be created"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: "Submission successfully created"
          schema:
            $ref: '#/definitions/Submission'
        405:
          description: "Invalid input"
  /tasks/{id}/submissions:
    parameters:
    - name: "id"
      in: path
      required: true
      type: integer
      description: "id of the task"
    get:
      summary: "Get submission of a task"
      description: "Get the information about the submission of the task identified by the supplied id"
      tags:
      - Submission
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Submission'
        404:
          description: "Task not found"
    post:
      summary: "Create a new submission for a task"
      tags:
      - Submission
      description: "Create a new submission for a task identified by the supplied id"
      parameters:
      - in: "body"
        name: "body"
        description: "Submission object which contains the information of the new submission to be created"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: "Submission successfully created"
          schema:
            $ref: '#/definitions/Submission'
        405:
          description: "Invalid input"
  /reviews/{id}:
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: integer
        description: "id of the review"
    get:
      summary: "Get information about a review"
      description: "Get the information about the review that is identified by the supplied id"
      tags:
      - Review
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
        404:
          description: "Review not found"
    put:
      summary: "Edit information of a review"
      description: "Edit the information of the review that is identified by the supplied id"
      tags:
      - Review
      parameters:
      - in: "body"
        name: "body"
        description: "Review object that contains the new information"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses: # check the codes!!
        200:
          description: "Review successfully edited"
          schema:
            $ref: '#/definitions/Review'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Review not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Delete a review"
      description: "Delete the review that is identified by the supplied id"
      tags:
      - Review
      responses:
        200:
          description: "Review successfully deleted"
          schema:
            $ref: '#/definitions/Review'
        404:
          description: "Review not found"
  /submissions/{id}/reviews:
    parameters:
    - name: "id"
      in: path
      required: true
      type: integer
      description: "id of the submission"
    get:
      summary: "Get reviews related to a submission"
      description: "Get the information about the reviews that are related to the submission identified by the supplied id"
      tags:
      - Review
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
        404:
          description: "Submission not found"
    post:
      summary: "Create a new review for a submission"
      tags:
      - Review
      description: "Create a new review for a submission identified by the supplied id"
      parameters:
      - in: "body"
        name: "body"
        description: "Review object which contains the information of the new review to be created"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        201:
          description: "Review successfully created"
          schema:
            $ref: '#/definitions/Review'
        405:
          description: "Invalid input"
definitions:
  User:
    type: "object"
    description: "Object representing a user"
    required:
      - "email"
      - "username"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the user"
      email:
        type: string
        format: email
        description: "Email address of the user"
      username:
        type: string
        description: "Username of the user"
      firstName:
        type: string
        description: "First name of the user"
      lastName:
        type: string
        description: "Last name of the user"
      registrationTime:
        type: integer
        format: timestamp
        readOnly: true
        description: "Registration time of the user"
  Group:
    type: "object"
    description: "Object representing a group of users"
    required:
      - "name"
      - "users"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the group"
      name:
        type: string
        description: "Name of the group"
      description:
        type: string
        description: "Description of the group"
      users:
        type: array
        items:
          type: integer
          format: int64
        uniqueItems: true
        description: "Users belonging to the group"
      creator:
        type: integer
        format: int64
        readOnly: true
        description: "User that created the group"
      public:
        type: boolean
        description: "Indicates if the group is public"
      creationTime:
        type: integer
        format: timestamp
        readOnly: true
        description: "Creation time of the group"
  Task:
    type: "object"
    description: "Object representing a task (an assignment)"
    required:
      - "title"
      - "assignment"
      - "type"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the task"
      title:
        type: string
        description: "Title of the task"
      assignment:
        type: string
        description: "Assignment of the task"
      type:
        type: string
        description: "Type of the task"
      creator:
        type: integer
        format: int64
        readOnly: true
        description: "User that created the task"
      creationTime:
        type: integer
        format: timestamp
        readOnly: true
        description: "Creation time of the task"
  Pool:
    type: "object"
    description: "Object representing a pool of tasks"
    required:
      - "name"
      - "tasks"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the pool"
      name:
        type: string
        description: "Name of the pool"
      description:
        type: string
        description: "Description of the pool"
      tasks:
        type: array
        items:
          type: integer
          format: int64
        uniqueItems: true
        description: "Tasks composing the pool"
      creator:
        type: integer
        format: int64
        readOnly: true
        description: "User that created the pool"
      public:
        type: boolean
        description: "Indicates if the pool is public"
      creationTime:
        type: integer
        format: timestamp
        readOnly: true
        description: "Creation time of the pool"
  Exam:
    type: "object"
    description: "Object representing an exam (test)"
    required:
      - "name"
      - "pool"
      - "group"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the exam"
      name:
        type: string
        description: "Name of the exam"
      description:
        type: string
        description: "Description of the exam"
      pool:
        type: integer
        format: int64
        description: "Pool of tasks used for the exam"
      group:
        type: integer
        format: int64
        description: "Group of people doing the exam"
      tasksPerPaper:
        type: integer
        description: "Number of tasks assigned to each paper (to each user)"
      startTime:
        type: integer
        format: timestamp
        description: "Start time of the exam"
      deadline:
        type: integer
        format: timestamp
        description: "Deadline of the exam"
      creator:
        type: integer
        format: int64
        readOnly: true
        description: "User that created the exam"
      creationTime:
        type: integer
        format: timestamp
        readOnly: true
        description: "Creation time of the exam"
  Paper:
    type: "object"
    description: "Object representing a paper (an instance of an exam assigned to a specific user)"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the paper"
      exam:
        type: integer
        format: int64
        readOnly: true
        description: "Exam relative to the paper"
      user:
        type: integer
        format: int64
        readOnly: true
        description: "User assignee of the paper"
      tasks:
        type: array
        items:
          type: integer
          format: int64
        uniqueItems: true
        readOnly: true
        description: "Tasks composing the paper"
      mark:
        type: number
        description: "Mark of the paper"
  Submission:
    type: "object"
    description: "Object representing a submission (an answer to a task)"
    required:
      - "exam"
      - "task"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the submission"
      user:
        type: integer
        format: int64
        readOnly: true
        description: "User that submitted the submission"
      exam:
        type: integer
        format: int64
        description: "Exam relative to the submission"
      task:
        type: integer
        format: int64
        description: "Task relative to the submission"
      creationTime:
        type: integer
        format: timestamp
        readOnly: true
        description: "Creation time of the submission"
  Review:
    type: "object"
    description: "Object representing a review (relative to a submission)"
    required:
      - "mark"
      - "comment"
      - "submission"
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        description: "ID of the review"
      user:
        type: integer
        format: int64
        readOnly: true
        description: "User that submitted the review"
      submission:
        type: integer
        format: int64
        description: "Submission relative to the review"
      mark:
        type: number
        description: "Mark of the review"
      comment:
        type: string
        description: "Comment of the review"
      creationTime:
        type: integer
        format: timestamp
        readOnly: true
        description: "Creation time of the review"
